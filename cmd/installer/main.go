package main

import (
	"bytes"
	_ "embed"
	"flag"
	"fmt"
	"os"
	"path/filepath"

	"vcc-auto-translate-installer/cmd/installer/utils"

	"github.com/PuerkitoBio/goquery"
	"github.com/pkg/errors"
)

var (
	//go:embed patch-loader.js
	scriptLoaderCode string

	t         = utils.T
	dontPause = false
)

const (
	scriptLoaderTmpl = `
<script type="module" name="vcc-auto-translate">
// This script is generated by the vcc-auto-translate project
// Source code: https://github.com/gizmo-ds/vcc-auto-translate
%s
</script>`
)

type stackTracer interface {
	StackTrace() errors.StackTrace
}

func main() {
	fmt.Println(t("banner"))

	flag.BoolVar(&dontPause, "dont-pause", false, "Don't pause after installation")
	flag.Parse()

	var err error
	var vccInstallPath string
	if !utils.FilesExist("CreatorCompanion.exe", "CreatorCompanionBeta.exe") {
		vccInstallPath, err = utils.FindVCCInstallPath()
		if err != nil {
			fmt.Println(t("error", err.Error()))
			pause()
			os.Exit(2)
		}
		fmt.Println(t("vcc-path", vccInstallPath))
	}

	if err = installer(vccInstallPath); err != nil {
		if e, ok := err.(stackTracer); ok {
			fmt.Printf("%v: %s\n", e.StackTrace()[0], t("error", err.Error()))
		} else {
			fmt.Println(t("error", err.Error()))
		}
		pause()
		os.Exit(2)
	}
	fmt.Println(t("install-success"))
	pause()
}

func installer(vccPath string) error {
	webappDist := filepath.Join(vccPath, "WebApp/Dist")
	if _, err := os.Stat(webappDist); err != nil {
		err = errors.New(t("webapp-notfound"))
		return errors.WithStack(err)
	}

	indexFile := filepath.Join(webappDist, "index.html")
	backupFile := indexFile + ".backup"
	if _, err := os.Stat(backupFile); os.IsNotExist(err) {
		if _, err := utils.CopyFile(indexFile, backupFile); err != nil {
			return errors.WithStack(err)
		}
	}

	htmlFile, err := os.ReadFile(indexFile)
	if err != nil {
		return errors.WithStack(err)
	}

	doc, err := goquery.NewDocumentFromReader(bytes.NewReader(htmlFile))
	if err != nil {
		return errors.WithStack(err)
	}
	indexModuleS := doc.Find("script[type='module'][src^='/assets/index-']")
	if indexModuleS.Length() > 0 {
		indexModuleS = indexModuleS.First()
		jsFilename, _ := indexModuleS.Attr("src")
		indexModuleS.AfterHtml(fmt.Sprintf(`<meta name="index-module" content="%s">`, jsFilename))
		indexModuleS.Remove()
	}
	doc.Find("script[name='vcc-auto-translate']").Remove()
	rootDiv := doc.Find("div#root").First()
	rootDiv.AfterHtml(fmt.Sprintf(scriptLoaderTmpl, scriptLoaderCode))

	indexCode, err := doc.Html()
	if err != nil {
		return errors.WithStack(err)
	}
	if err = os.WriteFile(indexFile, []byte(indexCode), 0600); err != nil {
		return errors.WithStack(err)
	}
	return nil
}

func pause() {
	if dontPause {
		return
	}
	fmt.Println(t("pause"))
	_, _ = fmt.Scanln()
}
