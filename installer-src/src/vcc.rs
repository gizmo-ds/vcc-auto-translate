use anyhow::{Context, Result};

#[cfg(target_os = "windows")]
pub fn install_path() -> Result<String> {
    use winreg::enums::*;
    use winreg::RegKey;
    let install_path: String = RegKey::predef(HKEY_CURRENT_USER)
        .open_subkey("Software\\VCC")?
        .get_value("InstallPath")
        .with_context(|| "Failed to get VCC install path")?;
    Ok(install_path)
}

pub fn patch_loader() -> Result<String> {
    let script_content = include_bytes!("../assets/patch-loader.js");
    let script_content = std::str::from_utf8(script_content.as_ref())
        .with_context(|| "Failed to convert patch loader asset to string")?;
    Ok(script_content.to_string())
}

pub fn installer_csp(index_content: String) -> Result<String> {
    let loader_content = patch_loader()?;
    let loader_content = format!(
        r#"<head>
<meta http-equiv="Content-Security-Policy" content="script-src 'none' 'unsafe-inline'">
<script type="module" name="vcc-auto-translate" defer>
// This script is generated by the vcc-auto-translate project
// Source code: https://github.com/gizmo-ds/vcc-auto-translate
{}
</script>"#,
        loader_content
    );

    let index_content = index_content.replace("<head>", loader_content.as_str());
    Ok(index_content)
}
